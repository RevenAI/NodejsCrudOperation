This is the complete CRUD I wrote initially in server.js before creating a separate controllers and routers for the methods to make the app modular and my codes look clean



app.get('/api/products', async (req, res) => {
    try {
        const products = await Product.find({});
    res.status(200).json(products);
    } catch (err) {
        res.status(500).json({message: `${err.name}\t${err.message}`});
    }
});

app.get('/api/product/:id', async (req, res) => {
    try {
    const id = req.params.id;
    const product = await Product.findById(id);
    if (!product) {
       return res.status(404).json({message: 'Product not found'});
    } res.status(200).json(product);
    } catch (err) {
        res.status(500).json({message: `${err.name}\t${err.message}`});
    }
});

app.post('/api/products', async (req, res) => {
    try {
     const product = await Product.insertMany(req.body);
     res.status(200).json(product);
    } catch (err) {
        res.status(500).json({message: `${err.name}\t${err.message}`});
    }
});

app.put('/api/product/:id', async (req, res) => {
    try {
     const { id } = req.params;
     const updatedProduct = await Product.findByIdAndUpdate(id, req.body, {new: true});
 
     if (!updatedProduct) {
         return res.status(404).json({message: 'Product not found'});
     } 
     res.status(200).json(updatedProduct);
    } catch (err) {
     res.status(500).json({message: `${err.name}\t${err.message}`});
    }
 });

app.delete('/api/product/:id', async (req, res) => {
    try {
        const id = req.params.id;
        const product = await Product.findByIdAndDelete(id);      
        if (!product) {
            return res.status(404).json({ message: 'Product not found, unable to delete.' });
        }
       res.status(204).send();
    } catch (err) {
        res.status(500).json({ message: `${err.name}\t${err.message}` });
    }
});

 
//Long Method to update
app.put('/api/product/:id', async (req, res) => {
   try {
    const { id } = req.params;
    const product = await Product.getByIdAndUpdate(id, req.body);

    if (!product) {
        return res.status(404).json({message: 'Product not found'});
    } 
    const updatedProduct = await Product.getById(id);
    res.status(200).json(updatedProduct);
   } catch (err) {
    res.status(500).json({message: `${err.name}\t${err.message}`});
   }

});
